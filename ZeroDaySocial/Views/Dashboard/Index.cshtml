@model ZeroDaySocial.Models.ZeroDayTwitterUser

<p>
    @if (Model != null)
    {
        @Model.Name<br />
        @Model.ScreenName<br />
        @Model.TwitterId<br />
    }
    else
    {
    <p>
        <a href="http://localhost:61624/twitterauthentication/twitterauth">LOGIN</a>
    </p>
}
    </p>

    <div class="container">
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="col-6">&nbsp;</div>
            <div class="col-6">
                Tacks<input type="text" id="tracks" />
                <br />
                <input type="button" id="twitterButton" value="Get Stream" />
                <input type="button" id="twitterStopButton" value="Stop Stream" />
                <input type="button" id="twitterRemoveButton" value="Disconnect Stream" />
                <input type="button" id="twitterPauseButton" value="Pause Stream" />
                <input type="button" id="twitterResumeButton" value="Resume Stream" />
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <hr />
            </div>
        </div>
        <div class="row">
            <div class="col-6">&nbsp;</div>
            <div class="col-6">
                <ul id="messagesList"></ul>
            </div>
        </div>
    </div>

    @section scripts
        {
        <script src="~/dist/signalr/signalr.js"></script>
        <script type="text/javascript">
            var twitterId = '@Model?.TwitterId';
            var clientId = '';

            if (twitterId != '') {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("http://lijonsolutionsdev.azurewebsites.net/twitterStreamerHub")
            .build();

            connection.on("Contact", (id) => {
                connection.invoke("Handshake", id).catch(err => console.error(err.toString()));
            });

            connection.on("Response", (success, id) => {
                if (success) {
                    console.log("Successfully connected with id " + id);
                    clientId = id;
                }
                else {
                    console.log("Handshake refused by server");
                }
            });

            connection.on("GetStream", (user, message) => {
                const msg = message.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                const encodedMsg = msg;
                const li = document.createElement("li");
                li.textContent = encodedMsg;
                document.getElementById("messagesList").appendChild(li);
            });

            connection.start().catch(err => console.error(err.toString()));

            document.getElementById("twitterButton").addEventListener("click", event => {
                test();
            });

            document.getElementById("twitterRemoveButton").addEventListener("click", event => {
                test2();
            });

            document.getElementById("twitterStopButton").addEventListener("click", event => {
                test3();
            });

            document.getElementById("twitterResumeButton").addEventListener("click", event => {
                test4();
                });

            document.getElementById("twitterPauseButton").addEventListener("click", event => {
                test5();
            });

            console.log(twitterId);

                function test() {
                const tracks = document.getElementById("tracks").value;
                console.log("TESTING")
                var request = new XMLHttpRequest();
                request.open("GET", "http://lijonsolutionsdev.azurewebsites.net/api/twitter/streamer/startstreamer?twitterId=" + twitterId + "&clientId=" + clientId + "&tracks=" + tracks);
                request.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        console.log(request.responseText);

                    }
                };

                request.send();
                }

                function test2() {
                    console.log("TESTING2")
                    var request = new XMLHttpRequest();
                    request.open("GET", "http://lijonsolutionsdev.azurewebsites.net/api/twitter/streamer/removestreamer?clientId=" + clientId);
                    request.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200) {
                            console.log(request.responseText);

                        }
                    };

                    request.send();
                }

                function test3() {
                    console.log("TESTING3")
                    var request = new XMLHttpRequest();
                    request.open("GET", "http://lijonsolutionsdev.azurewebsites.net/api/twitter/streamer/stopstreamer?clientId=" + clientId);
                    request.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200) {
                            console.log(request.responseText);

                        }
                    };

                    request.send();
                }

                function test4() {
                    console.log("TESTING3")
                    var request = new XMLHttpRequest();
                    request.open("GET", "http://lijonsolutionsdev.azurewebsites.net/api/twitter/streamer/resumestreamer?clientId=" + clientId);
                    request.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200) {
                            console.log(request.responseText);

                        }
                    };

                    request.send();
                }

                function test5() {
                    console.log("TESTING3")
                    var request = new XMLHttpRequest();
                    request.open("GET", "http://lijonsolutionsdev.azurewebsites.net/api/twitter/streamer/pausestreamer?clientId=" + clientId);
                    request.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200) {
                            console.log(request.responseText);

                        }
                    };

                    request.send();
                }
            }

    //    document.getElementById("sendButton").addEventListener("click", event => {
    //    const user = document.getElementById("userInput").value;
    //    const message = document.getElementById("messageInput").value;
    //    connection.invoke("Handshake", clientId).catch(err => console.error(err.toString()));
    //    event.preventDefault();
    //});

        </script>
    }

